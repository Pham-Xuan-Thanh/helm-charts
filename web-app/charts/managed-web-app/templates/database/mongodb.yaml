 {{ if .Values.mongodb.enabled }}
apiVersion: apps/v1
kind: {{ ternary "StatefulSet" "Deployment" .Values.mongodb.useStatefulSet | quote }}
metadata:
  name: {{ print (include "managed-web-app.fullname" .) "-mongo" }}
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/component: mongo
    {{- include "managed-web-app.labels" . | nindent 4 }}
    {{ with .Values.mysql.podLabels -}}
      {{ toYaml . | nindent 6 }}
    {{- end }}
  {{- with .Values.mongodb.annotations }}
  annotations:
    {{- toYaml .  | nindent 4 }}
  {{- end }}
spec:
  selector:
    matchLabels:
      app.kubernetes.io/component: mongo
      {{ include "managed-web-app.labels" . | nindent 6 }}
  serviceName: {{ print (include "managed-web-app.fullname" .) "-mongo" }}
  replicas: 1
  template:
    metadata:
      labels:
        app.kubernetes.io/component: mongo
      {{ include "managed-web-app.labels" . | nindent 8 }}
      {{ with .Values.mongodb.popdLabels}}
      {{  toYaml . | nindent 8 }}
      {{ end }}
      {{- with .Values.mongodb.podAnnotations }}
      annotations:
        {{ toYaml . | indent 8 }}
      {{- end }}
    spec:
    {{- with .Values.mongodb.priorityClassName }}
      priorityClassName: {{ . }}
    {{- end }}
    {{- with .Values.mongodb.imagePullSecrets }}
      imagePullSecrets:
      {{- range . }}
        - name: {{ . }}
      {{- end}}
    {{- end }}
    {{- if .Values.mongodb.podSecurityContext.enabled }}
      securityContext: {{- omit .Values.mongodb.podSecurityContext "enabled" | toYaml | nindent 8 }}
    {{- end }}
      terminationGracePeriodSeconds: {{ .Values.mongodb.terminationGracePeriodSeconds }}
      {{- if .Values.mongodb.serviceAccount }}
      serviceAccountName: {{ .Values.mongodb.serviceAccount }}
      {{- end }}
      initContainers:
        - name: copy-config
          image: "{{ .Values.mongodb.copyConfigImage.repository }}:{{ default "latest" .Values.mongodb.copyConfigImage.tag }}"
          imagePullPolicy: {{ .Values.mongodb.copyConfigImage.pullPolicy | quote }}
          command:
            - "sh"
          args:
            - "-c"
            - |
              set -e
              set -x

              cp /configdb-readonly/mongod.conf /data/configdb/mongod.conf

            {{- if .Values.mongodb.tls.enabled }}
              cp /ca-readonly/tls.key /data/configdb/tls.key
              cp /ca-readonly/tls.crt /data/configdb/tls.crt
            {{- end }}

            {{- if .Values.mongodb.auth.enabled }}
              cp /keydir-readonly/key.txt /data/configdb/key.txt
              chmod 600 /data/configdb/key.txt
            {{- end }}
          volumeMounts:
            - name: workdir
              mountPath: /work-dir
            - name: config
              mountPath: /configdb-readonly
            - name: configdir
              mountPath: /data/configdb
          {{- if .Values.mongodb.tls.enabled }}
            - name: ca
              mountPath: /ca-readonly
          {{- end }}
          {{- if .Values.mongodb.auth.enabled }}
            - name: keydir
              mountPath: /keydir-readonly
          {{- end }}
          resources:
{{ toYaml .Values.mongodb.init.resources | indent 12 }}
      containers:
        - name: {{ template "managed-web-app.name" . }}
          image: "{{ .Values.mongodb.image.repository }}:{{ default "latest" .Values.mongodb.image.tag }}"
          imagePullPolicy: "{{ .Values.mongodb.image.pullPolicy }}"
        {{- if .Values.mongodb.extraVars }}
          env:
{{ toYaml .Values.mongodb.extraVars | indent 12 }}
        {{- end }}
          ports:
            - name: mongodb
              containerPort: 27017
          resources:
{{ toYaml .Values.mongodb.resources | indent 12 }}
          command:
            - mongod
          args:
            - --config=/data/configdb/mongod.conf
            - --dbpath=/data/db
            # - --replSet={{.Values.replicaSetName}}
            - --port=27017
            - --bind_ip=0.0.0.0
          {{- if .Values.mongodb.auth.enabled }}
            - --auth
            - --keyFile=/data/configdb/key.txt
          {{- end }}
          {{- if .Values.mongodb.tls.enabled }}
            - --sslMode={{ .Values.mongodb.tls.mode }}
            - --sslCAFile=/data/configdb/tls.crt
            - --sslPEMKeyFile=/work-dir/mongo.pem
          {{- end }}
          livenessProbe:
            exec:
              command:
                - mongo
              {{- if .Values.mongodb.tls.enabled }}
                - --ssl
                - --sslCAFile=/data/configdb/tls.crt
                - --sslPEMKeyFile=/work-dir/mongo.pem
              {{- end }}
                - --eval
                - "db.adminCommand('ping')"
            initialDelaySeconds: {{ .Values.mongodb.livenessProbe.initialDelaySeconds }}
            timeoutSeconds: {{ .Values.mongodb.livenessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.mongodb.livenessProbe.failureThreshold }}
            periodSeconds: {{ .Values.mongodb.livenessProbe.periodSeconds }}
            successThreshold: {{ .Values.mongodb.livenessProbe.successThreshold }}
{{- if semverCompare ">=1.18-0" .Capabilities.KubeVersion.GitVersion }}
          startupProbe:
            exec:
              command:
                - mongo
              {{- if .Values.mongodb.tls.enabled }}
                - --ssl
                - --sslCAFile=/data/configdb/tls.crt
                - --sslPEMKeyFile=/work-dir/mongo.pem
              {{- end }}
                - --eval
                - "db.adminCommand('ping')"
            initialDelaySeconds: {{ .Values.mongodb.startupProbe.initialDelaySeconds }}
            timeoutSeconds: {{ .Values.mongodb.startupProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.mongodb.startupProbe.failureThreshold }}
            periodSeconds: {{ .Values.mongodb.startupProbe.periodSeconds }}
            successThreshold: {{ .Values.mongodb.startupProbe.successThreshold }}
{{- end }}
          readinessProbe:
            exec:
              command:
                - mongo
              {{- if .Values.mongodb.tls.enabled }}
                - --ssl
                - --sslCAFile=/data/configdb/tls.crt
                - --sslPEMKeyFile=/work-dir/mongo.pem
              {{- end }}
                - --eval
                - "db.adminCommand('ping')"
            initialDelaySeconds: {{ .Values.mongodb.readinessProbe.initialDelaySeconds }}
            timeoutSeconds: {{ .Values.mongodb.readinessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.mongodb.readinessProbe.failureThreshold }}
            periodSeconds: {{ .Values.mongodb.readinessProbe.periodSeconds }}
            successThreshold: {{ .Values.mongodb.readinessProbe.successThreshold }}
          volumeMounts:
            - name: datadir
              mountPath: /data/db
            - name: configdir
              mountPath: /data/configdb
            - name: workdir
              mountPath: /work-dir
          {{ with .Values.mongodb.extraVolumeMounts }}
            {{- toYaml . | nindent 12 -}}
          {{ end }}
   {{- with .Values.mongodb.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.mongodb.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.mongodb.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}
      volumes:
        - name: config
          configMap:
            name: {{ template "managed-web-app.fullname" . }}-mongodb
        # - name: init
        #   configMap:
        #     defaultMode: 0755
        #     name: {{ template "managed-web-app.fullname" . }}-init
        {{- if .Values.mongodb.tls.enabled }}
        - name: ca
          secret:
            defaultMode: 0400
            secretName: {{ template "managed-web-app.fullname" . }}-ca
        {{- end }}
        {{- if .Values.mongodb.auth.enabled }}
        - name: keydir
          secret:
            defaultMode: 0400
            secretName: {{ ternary .Values.mongodb.auth.keySecret (fail "Enabled Auth: Require Secrets store key") .Values.mongodb.auth.keySecret }}
        {{- end }}
        - name: workdir
          emptyDir: {}
        - name: configdir
          emptyDir: {}
{{- if .Values.mongodb.extraVolumes }}
{{- tpl (toYaml .Values.mongodb.extraVolumes) . | nindent 8 }}
{{- end }}
{{- if .Values.mongodb.persistentVolume.enabled }}
  volumeClaimTemplates:
    - metadata:
        name: datadir
        annotations:
        {{- range $key, $value := .Values.mongodb.persistentVolume.annotations }}
          {{ $key }}: "{{ $value }}"
        {{- end }}
      spec:
        accessModes:
        {{- range .Values.mongodb.persistentVolume.accessModes }}
          - {{ . | quote }}
        {{- end }}
        resources:
          requests:
            storage: {{ .Values.mongodb.persistentVolume.size | quote }}
      {{- if .Values.mongodb.persistentVolume.storageClass }}
      {{- if (eq "-" .Values.mongodb.persistentVolume.storageClass) }}
        storageClassName: ""
      {{- else }}
        storageClassName: "{{ .Values.mongodb.persistentVolume.storageClass }}"
      {{- end }}
      {{- end }}
{{- else if .Values.mongodb.hostPath }}
        - name: datadir
          hostPath: 
            path: {{ .Values.mongodb.hostPath }} 
            type: DirectoryOrCreate
{{- else }}
        - name: datadir
          emptyDir: {}
{{- end }}

{{ end }}